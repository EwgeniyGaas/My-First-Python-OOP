# ссылка на задание: https://github.com/netology-code/py-homeworks-basic/tree/master/6.classes

class Person:

    __error = "Ошибка. Операция невозможна."
    students_list = list()
    lecturers_list = list()

    def average_course_grade(self, course):
        """Возвращает среднюю оценку студента, либо лектора за определённый курс"""
        if isinstance(self, Student) or isinstance(self, Lecturer):
            summa_grades = 0
            quantity_grades = 0
            for key, grades in self.grades.items():
                if course == key:
                    quantity_grades += len(grades)
                    for grade in grades:
                        summa_grades += int(grade)
                    return round(summa_grades / quantity_grades, 2)
            return False
        else:
            print(__error)

    def average_grade_by_all(self, persons_list: list(), course: str()):
        """Возвращает среднюю оценку всех студентов, либо всех лекторов за определённый курс"""
        quantity_persons = 0
        summa_average_grades = 0
        for person in persons_list:
            if person.average_course_grade(course):
                quantity_persons += 1
                summa_average_grades += person.average_course_grade(course)
        if quantity_persons:
            return round(summa_average_grades / quantity_persons, 2)
        else:
            return 0
    
    @property
    def average_grade(self):
        """Возвращает среднюю из всех оценок полученных студентом, либо лектором по всем курсам"""
        if isinstance(self, Student) or isinstance(self, Lecturer):
            summa_grades = 0
            quantity_grades = 0
            for grades in self.grades.values():
                quantity_grades += len(grades)
                for grade in grades:
                    summa_grades += int(grade)
            if quantity_grades:
                return round(summa_grades / quantity_grades, 2)
            else:
                return 0
        else:
            print(__error)

    @property
    def full_name(self):
        return f"{self.name} {self.surname}"

    def __lt__(self, other):
        if type(self) == type(other):
            return self.average_grade < other.average_grade
        else:
            print(__error)

    def __le__(self, other):
        if type(self) == type(other):
            return self.average_grade <= other.average_grade
        else:
            print(__error)
    
    def __eq__(self, other):
        if type(self) == type(other):
             return self.average_grade == other.average_grade
        else:
            print(__error)
    
    def __ne__(self, other):
        if type(self) == type(other):
            return self.average_grade != other.average_grade
        else:
            print(__error)
    
    def __gt__(self, other):
        if type(self) == type(other):
            return self.average_grade > other.average_grade
        else:
            print(__error)
    
    def __ge__(self, other):
        if type(self) == type(other):
            return self.average_grade >= other.average_grade
        else:
            print(__error)


class Student(Person):

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        self.students_list.append(self)

    def set_courses_in_progress(self, courses: list):
        for course in courses:
            if course not in self.courses_in_progress:
                self.courses_in_progress.append(course)
         
    def set_finished_courses(self, courses: list):
        for course in courses:
            for element in self.courses_in_progress:
                if element == course:
                    self.courses_in_progress.remove(element)
                    self.finished_courses.append(course)
                    print(f"Курс {course} закончен")
                    break
            else:
                print(f"Ошибка, студент не проходил курс {course}")

    def __str__(self):
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за домашние задания: {self.average_grade}\n"
                f"Курсы в процессе изучения: {self.courses_in_progress}\n"
                f"Завершённые курсы: {self.finished_courses}\n")

    def rate_hw(self, lecturer, course, grade):
        """Выставление оценки студентом лектору за качество преподавания"""
        if (isinstance(lecturer, Lecturer) and (course in self.courses_in_progress or course in self.finished_courses)
            and course in lecturer.courses_attached and 0 <= grade <= 10):
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
            print("Оценка сохранена")
        else:
            print("Ошибка")

         
class Mentor(Person):

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def set_courses_attached(self, courses: list):
        for cours in courses:
            if cours not in self.courses_attached:
                self.courses_attached.append(cours)


class Lecturer(Mentor):

    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
        self.lecturers_list.append(self)

    def __str__(self):
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за лекции: {self.average_grade}\n")


class Reviewer(Mentor):

    def __init__(self, name, surname):
        super().__init__(name, surname)

    def __str__(self):
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n")
    
    def rate_hw(self, student, course, grade):
        """Выставление оценки проверяющим студенту за практическое задание"""
        if (isinstance(student, Student) and course in self.courses_attached
            and course in student.courses_in_progress and 0 <= grade <= 10):
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
            print("Оценка сохранена")
        else:
            print("Ошибка")


# Создаём по два экземпляра класса
ivan = Student("Иван", "Иванов")
petr = Student("Пётр", "Петров")

anna = Reviewer("Анна", "Васильева")
nina = Reviewer("Нина", "Сидорова")

archimed = Lecturer("Архимед", "Сиракузский")
aristotel = Lecturer("Аристотель", "Стагирит")

# Заполняем данные о курсах и проверяем результат
print("--Заполняем данные о курсах и проверяем результат--\n")

ivan.set_courses_in_progress(["Python", "Алгоритмы", "С++", "English"])
petr.set_courses_in_progress(["Python", "Алгоритмы", "Java", "HTML", "Java", "HTML"])
print(ivan.full_name, "проходит курсы", ivan.courses_in_progress)
print(petr.full_name, "проходит курсы", petr.courses_in_progress)

anna.set_courses_attached(["Python", "Java", "С++"])
nina.set_courses_attached(["Алгоритмы", "English", "HTML", "HTML", "HTML"])
print(anna.full_name, "проверяет курсы", anna.courses_attached)
print(nina.full_name, "проверяет курсы", nina.courses_attached)

archimed.set_courses_attached(["Python", "Java", "Java", "English", "English"])
aristotel.set_courses_attached(["Python", "Алгоритмы", "С++", "HTML"])
print(archimed.full_name, "ведёт курсы", archimed.courses_attached)
print(aristotel.full_name, "ведёт курсы", aristotel.courses_attached)

print("-"*20)

# Выставление оценок студентам проверяющими
print("--Выставление оценок студентам проверяющими--\n")

anna.rate_hw(ivan, "Алгоритмы", 8)
anna.rate_hw(ivan, "Java", 8)
anna.rate_hw(ivan, "Python", 8)
anna.rate_hw(ivan, "Python", 9)
anna.rate_hw(ivan, "Python", 10)
anna.rate_hw(ivan, "Python", 11)

anna.rate_hw(petr, "Python", 8)
anna.rate_hw(petr, "Python", 9)
anna.rate_hw(petr, "Python", 7)

print()

nina.rate_hw(petr, "Python", 8)
nina.rate_hw(petr, "English", 8)
nina.rate_hw(petr, "HTML", 8)
nina.rate_hw(petr, "HTML", 7)
nina.rate_hw(petr, "Алгоритмы", 7)
nina.rate_hw(petr, "Алгоритмы", 8)
nina.rate_hw(petr, "Алгоритмы", 9)
nina.rate_hw(petr, "Алгоритмы", 11)

nina.rate_hw(ivan, "English", 7)
nina.rate_hw(ivan, "English", 8)
nina.rate_hw(ivan, "English", 9)

print()

print(ivan.full_name, "оценки", ivan.grades)
print(petr.full_name, "оценки", petr.grades)

print("-"*20)

# Студенты закончили некоторые курсы
print("--Студенты закончили некоторые курсы--\n")

ivan.set_finished_courses(["Алгоритмы", "HTML", "С++"])
petr.set_finished_courses(["Java", "English", "HTML"])

print(ivan.full_name, "проходит курсы", ivan.courses_in_progress)
print(ivan.full_name, "закончил курсы", ivan.finished_courses)
print(petr.full_name, "проходит курсы", petr.courses_in_progress)
print(petr.full_name, "закончил курсы", petr.finished_courses)

print("-"*20)

# Выставление оценок лекторам студентами
print("--Выставление оценок лекторам студентами--\n")

ivan.rate_hw(archimed, "Алгоритмы", 8)
ivan.rate_hw(archimed, "Java", 8)
ivan.rate_hw(archimed, "Python", 8)
ivan.rate_hw(archimed, "Python", 7)
ivan.rate_hw(archimed, "Python", 10)
ivan.rate_hw(archimed, "Python", 11)

petr.rate_hw(aristotel, "Python", 10)
petr.rate_hw(aristotel, "Python", 9)
petr.rate_hw(aristotel, "Python", 10)
petr.rate_hw(archimed, "Python", 9)
petr.rate_hw(archimed, "Python", 9)
petr.rate_hw(archimed, "Python", 8)
petr.rate_hw(aristotel, "Алгоритмы", 10)
petr.rate_hw(aristotel, "Алгоритмы", 9)
petr.rate_hw(aristotel, "Алгоритмы", 7)

print(archimed.full_name, "оценки", archimed.grades)
print(aristotel.full_name, "оценки", aristotel.grades)

print("-"*20)

# Проверка переопределения метода __str__ и операторов сравнения
print("--Проверка переопределения метода __str__ и операторов сравнения--\n")

print(anna)
print(nina)

print(ivan)
print(petr)

print(ivan < petr)
print(ivan <= petr)
print(ivan > petr)
print(ivan >= petr)
print(ivan == petr)
print(ivan != petr)
print()

print(archimed)
print(aristotel)

print(archimed < aristotel)
print(archimed <= aristotel)
print(archimed > aristotel)
print(archimed >= aristotel)
print(archimed == aristotel)
print(archimed != aristotel)

print("-"*20)

# Средняя оценка за все курсы
print("--Средняя оценка за все курсы--\n")

person = Person()

print(ivan.full_name, "оценки", ivan.grades)
print(petr.full_name, "оценки", petr.grades)
print()

print("Средняя оценка студентов по курсу", "Python", person.average_grade_by_all(person.students_list, "Python"))
print("Средняя оценка студентов по курсу", "English", person.average_grade_by_all(person.students_list, "English"))
print("Средняя оценка студентов по курсу", "Физика", person.average_grade_by_all(person.students_list, "Физика"))
print()

print(archimed.full_name, "оценки", archimed.grades)
print(aristotel.full_name, "оценки", aristotel.grades)
print()

print("Средняя оценка лекторов по курсу", "Python", person.average_grade_by_all(person.lecturers_list, "Python"))
print("Средняя оценка лекторов по курсу", "English", person.average_grade_by_all(person.lecturers_list, "English"))
print("Средняя оценка лекторов по курсу", "Алгоритмы", person.average_grade_by_all(person.lecturers_list, "Алгоритмы"))


